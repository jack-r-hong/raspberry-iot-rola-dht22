import 'package:equatable/equatable.dart';

/// generate by https://javiercbk.github.io/json_to_dart/
class AutogeneratedDataBoard {
  final DataBoardReadDataModel result;

  AutogeneratedDataBoard({required this.result});

  factory AutogeneratedDataBoard.fromJson(Map<String, dynamic> json) {
    DataBoardReadDataModel result;
    if (json['results'] != null) {
      result = DataBoardReadDataModel(json['temp'], json['hdmi']);
      return AutogeneratedDataBoard(result: result);
    } else {
      throw "results error";
    }
  }

  // Map<String, dynamic> toJson() {
  //   final data = <String, dynamic>{};
  //   data['results'] = results.map((v) => v.toJson()).toList();
  //   return data;
  // }
}

class DataBoardSensorData extends Equatable {
  final int id;
  final DateTime time;
  final double val;

  DataBoardSensorData(this.id, this.time, this.val);

  @override
  List<Object> get props => [id, time, val];

  factory DataBoardSensorData.fromJson(Map<String, dynamic> json) {
    return DataBoardSensorData(
        json['id'] as int, json['time'] as DateTime, json['val' as double]);
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['time'] = time;
    data['val'] = val;
    return data;
  }
}

class DataBoardReadDataModel {
  final List<DataBoardSensorData> temp;
  final List<DataBoardSensorData> humi;

  DataBoardReadDataModel(this.temp, this.humi);

  factory DataBoardReadDataModel.fromJson(Map<String, dynamic> json) {
    var temp = <DataBoardSensorData>[];
    var humi = <DataBoardSensorData>[];
    if (json['results'] != null) {
      if (json['results']['temp'] != null) {
        json['results']['temp'].forEach((v) {
          temp.add(DataBoardSensorData.fromJson(v as Map<String, dynamic>));
        });
        if (json['results']['humi'] != null) {
          json['results']['humi'].forEach((v) {
            temp.add(DataBoardSensorData.fromJson(v as Map<String, dynamic>));
          });
        }
      }
    }
    return DataBoardReadDataModel(temp, humi);
  }
}
